syntax = "proto3";

package python;


option java_package = "org.schabi.newpipe.extractor.pybridge";
option java_outer_classname = "PyBridgeProtos";


message InfoDict {
    /* https://github.com/rg3/youtube-dl/blob/master/youtube_dl/extractor/common.py#L75-L257 */

    message Format {
        string url = 1; // The URL of the video file
        string manifest_url = 2; /* The URL of the manifest file in case of
                                             fragmented media (DASH, hls, hds) */
        string ext = 3; //  Will be calculated from URL if missing
        string format = 4; /*  A human-readable description of the format
                                        ("mp4 container with h264/opus").
                                        Calculated from the format_id, width, height.
                                        and format_note fields if missing. */
        string format_id = 5; /* A short description of the format
                                          ("mp4_h264_opus" or "19").
                                          Technically optional, but strongly recommended. */
        string format_note = 6; /* Additional info about the format
                                            ("3D" or "DASH video") */
        uint64 width = 7; // Width of the video, if known
        uint64 height = 8; // Height of the video, if known
        string resolution = 9; // Textual description of width and height
        double tbr = 10; // Average bitrate of audio and video in KBit/s
        double abr = 11; // Average audio bitrate in KBit/s
        string acodec = 12; // Name of the audio codec in use
        double asr = 13; // Audio sampling rate in Hertz
        double vbr = 14; // Average video bitrate in KBit/s
        double fps = 15; // Frame rate
        string vcodec = 16; // Name of the video codec in use
        string container = 17; // Name of the container format
        uint64 filesize = 18; // The number of bytes, if known in advance
        uint64 filesize_approx = 19; // An estimate for the number of bytes
        string player_url = 20; // SWF Player URL (used for rtmpdump).

        enum Protocol {
            HTTP = 0;
            HTTPS = 1;
            RTSP = 2;
            RTMP = 3;
            RTMPE = 4;
            M3U8 = 5;
            M3U8_NATIVE = 6;
            HTTP_DASH_SEGMENTS = 7;
        }

        Protocol protocol = 21; // The protocol used for the actual download

        string fragment_base_url = 22; /* Base URL for fragments. Each fragment's path
                                                   value (if present) will be relative to
                                                   this URL. */

        message Fragment {
            /*  Each fragment entry must contain either an url
                or a path. If an url is present it should be
                considered by a client. Otherwise both path and
                fragment_base_url must be present. */

            string url = 1; // fragment's URL
            string path = 2; /* fragment's path relative to
                                         fragment_base_url */
            double duration = 3;
            uint64 filesize = 4;
        }

        repeated Fragment fragments = 23; // A list of fragments of a fragmented media. 

        int64 preference = 24; /*  Order number of this format. If this field is
                                            present and not None, the formats get sorted
                                            by this field, regardless of all other values.
                                            -1 for default (order by other properties),
                                            -2 or smaller for less than default.
                                            < -1000 to hide the format (if there is
                                            another one which is strictly better) */

        string language = 25; //  Language code, e.g. "de" or "en-US"
        int64 language_preference = 26; /* Is this in the language mentioned in
                                                    the URL?
                                                    10 if it's what the URL is about,
                                                    -1 for default (don't know),
                                                    -10 otherwise, other values reserved for now. */

        int64 quality = 27; /* Order number of the video quality of this
                                        format, irrespective of the file format.
                                        -1 for default (order by other properties),
                                        -2 or smaller for less than default. */

        int64 source_preference = 28; /* Order number for this video source
                                                  (quality takes higher priority)
                                                  -1 for default (order by other properties),
                                                  -2 or smaller for less than default. */

        map<string,string> http_headers = 29; /* A dictionary of additional HTTP headers
                                                          to add to the request. */

        double stretched_ratio = 30; /* If given and not 1, indicates that the
                                                 video's pixels are not square.
                                                 width : height ratio as float. */

        bool no_resume = 31; /* The server does not support resuming the
                                         (HTTP or RTMP) download. */

    }

    repeated Format formats = 1;
    string url = 2; // url of video for if formats is not present
    string ext = 3; // Video filename extension (if formats is not present)
    string format = 4; // The video format, defaults to ext
    string player_url = 5; // SWF Player URL (used for rtmpdump).

    string alt_title = 6; // A secondary title of the video.
    string display_id = 7; /* An alternative identifier for the video, not necessarily
                                       unique, but available before title. Typically, id is
                                       something like "4234987", title "Dancing naked mole rats",
                                       and display_id "dancing-naked-mole-rats" */

    message Thumbnail {
        string id = 1;
        string url = 2;
        int64 preference = 3; // quality of the image
        int64 width = 4; 
        int64 height = 5;
        int64 resolution = 6; // string "{width}x{height"}, deprecated
        int64 filesize = 7;
    }

    repeated Thumbnail thumbnails = 8;
    string thumbnail = 9; // Full URL to a video thumbnail image.
    string description = 10; // Full video description.
    string uploader = 11; // Full name of the video uploader.
    string license = 12; // License name the video is licensed under.
    string creator = 13; // The creator of the video.
    string release_date = 14; // The date (YYYYMMDD) when the video was released.
    int64 timestamp = 15; // UNIX timestamp of the moment the video became available.
    string upload_date = 16; /* Video upload date (YYYYMMDD).
                                         If not explicitly set, calculated from timestamp. */
    string uploader_id = 17; // Nickname or id of the video uploader.
    string uploader_url = 18; // Full URL to a personal webpage of the video uploader.
    string location = 19; // Physical location where the video was filmed.

    message Subtitles {
        message Subformat {
            string ext = 1;
            string data = 2; 
            string url = 3;
        }

        string tag = 1;
        repeated Subformat subformats = 2;
    }

    Subtitles subtitles = 20;
    Subtitles automatic_captions = 21; /* Like 'subtitles', used by the YoutubeIE for
                                                   automatically generated captions */
    double duration = 22; // Length of the video in seconds
    uint64 view_count = 37; // How many users have watched the video on the platform
    uint64 like_count = 24; // Number of positive ratings of the video
    uint64 dislike_count = 25; // Number of negative ratings of the video
    uint64 repost_count = 26; // Number of reposts of the video
    double average_rating = 27; // Average rating give by users, the scale used depends on the webpage
    uint64 comment_count = 28; // Number of comments on the video

    message Comment {
        string author = 1; // human-readable name of the comment author
        string author_id = 2; // user ID of the comment author
        string comment_id = 3; // Comment ID
        string html = 4; // Comment as HTML
        string text = 5; // Plain text of the comment
        int64 timestamp = 6; // UNIX timestamp of comment
        string parent = 7; /* ID of the comment this one is replying to.
                                       Set to "root" to indicate that this is a
                                       comment to the original video. */
    }

    repeated Comment comments = 29;
    int32 age_limit = 30; // Age restriction for the video, as an integer (years)
    string webpage_url = 31; /*  The URL to the video webpage, if given to youtube-dl it
                                          should allow to get the same result again. (It will be set
                                          by YoutubeDL if it's missing) */
    repeated string categories = 32; /*  A list of categories that the video falls in, for example
                                                  ["Sports", "Berlin"] */

    repeated string tags = 33; // A list of tags assigned to the video, e.g. ["sweden", "pop music"]
    bool is_live = 34; /* Whether this video is a
                                   live stream that goes on instead of a fixed-length video. */
   
    uint64 start_time = 35; /* Time in seconds where the reproduction should start, as
                                        specified in the URL. */

    uint64 end_time = 36; /* Time in seconds where the reproduction should end, as
                                      specified in the URL. */

    message Chapter {
        int64 start_time = 1; // The start time of the chapter in seconds
        int64 end_time = 2; // The end time of the chapter in seconds
        string title = 3;
    }

    repeated Chapter chapters = 38;

    message ChapterInfo {
        string chapter = 1; // Name or title of the chapter the video belongs to.
        int64 chapter_number = 2; // Number of the chapter the video belongs to, as an integer.
        string chapter_id = 3; // Id of the chapter the video belongs to
    }

    ChapterInfo chapter_info = 39; /* should only be used when the video belongs to some logical
                                               chapter or section */

    message SeriesInfo {
        string series = 1; // Title of the series or programme the video episode belongs to.
        string season = 2; // Title of the season the video episode belongs to.
        int64 season_number = 3; // Number of the season the video episode belongs to
        string season_id = 4; // Id of the season the video episode belongs to
        string episode = 5; /* Title of the video episode. Unlike mandatory video title field,
                                        this field should denote the exact title of the video episode
                                        without any kind of decoration. */
        int64 episode_number = 6; // Number of the video episode within a season
        string episode_id = 7; // Id of the video episode
    }

    SeriesInfo series_info = 40; /* should only be used when the video is an episode of some
                                             series, programme or podcast */
   
    message AlbumInfo {
        string track = 1; // Title of the track.
        int64 track_number = 2; // Number of the track within an album or a disc
        string track_id = 3; // Id of the track (useful in case of custom indexing, e.g. 6.iii)
        string artist = 4;
        string genre = 5;
        string album = 6; // Title of the album the track belongs to
        string album_type = 7; //  Type of the album (e.g. "Demo", "Full-length", "Split", "Compilation", etc).
        repeated string album_artist = 8; /* List of all artists appeared on the album (e.g.
                                                      "Ash Borer / Fell Voices" or "Various Artists", useful for splits
                                                      and compilations). */
        int64 disc_number = 9; // Number of the disc or other physical medium the track belongs to
        int32 release_year = 10; // Year (YYYY) when the album was released
    }

    AlbumInfo album_info = 41; /* should only be used when the media is a track or a part of
                                           a music album */


    repeated InfoDict children = 42; /* Child videos of this video, if any
                                                 corresponds to _type='playlist' or _type='multi_video' in youtube-dl */
    repeated string child_urls = 43; /* like children, except lazy
                                                 urls can be run through youtube-dl to get the data that would go in children */

}

message Request {

    int64 job_id = 1;

    message URLResolveRequest {
        string url = 1;
        string username = 2; // optional username & pass for sites that require login
        string password = 3;
        string resolver_name = 4; // specify which info extractor to use (optional)
    }

    message URLIsResolvableRequest {
        string url = 1;
    }

    oneof request {
        URLResolveRequest url_resolve_request = 2;
        URLIsResolvableRequest url_is_resolvable_request = 3;
    }

}

message Response {

    int64 job_id = 1;

    message URLResolveResponse {
        InfoDict info_dict = 1;
        bool success = 2; // did the request succeed?
        bool password_required = 3; // did this fail because it requires a password?
        bool geo_restricted = 4; // did this fail because it's blocked in the country we're in?
    }

    message URLIsResolvableResponse {
        bool is_resolvable = 1;
        repeated string resolver_names = 2; // which IE's support this url
    }

    oneof response {
        URLResolveResponse url_resolve_response = 2;
        URLIsResolvableResponse url_is_resolvable_response = 3;
    }

}
