const char *python_monkeypatches = "# No imports of code that isn't in androidbridge or libpython27.so allowed until noted\n\nimport androidbridge\nimport sys\nimport marshal\n\nModuleType = type(sys)\n\ndirname = "org_schabi_newpipe_extractor_PyBridge"\n\ndef load_bytecode(fname):\n    return marshal.loads(androidbridge.load_asset('%s/%s' % (dirname, fname))\n\nclass ModuleLoader(object):\n\n    def __init__(self):\n        self.fnames = androidbridge.asset_filenames()\n\n    def generate_fname(self, fullname):\n        base = fullname.replace('.', '_')\n        mod = '%s.pyc' % base\n        if mod in self.fnames:\n            return mod\n        pkg = '%s___init__.pyc' % base\n        if pkg in self.fnames:\n            return pkg\n        return None\n\n    def find_module(self, fullname, path=None):\n        fname = self.generate_fname(fullname, path)\n        if fname is None:\n            return None\n        else:\n            return self\n\n    def load_module(self, name):\n        if name in sys.modules:\n            return sys.modules[name]\n        fname = self.generate_fname(name)\n        if fname is None:\n            raise ImportError('file does not exist')\n        try:\n            data = load_bytecode(fname)\n        except:\n            raise ImportError('failed to load file')\n        mod = sys.modules.setdefault(name, ModuleType(name))\n        mod.__file__ = '/android_asset/%s/%s' % (dirname, fname)\n        mod.__loader__ = self\n        if fname.endswith('__init__.pyc'):\n            mod.__path__ = []\n            mod.__package__ = name\n        else:\n            mod.__package__ = name.rpartition('.')[0]\n        exec(data, mod.__dict__)\n        return mod\n\n    def get_data(self, path):\n        try:\n            return androidbridge.load_asset(str(path))\n        except:\n            raise IOError()\n\nsys.meta_path = [ModuleLoader()]\n\n# Normal imports allowed after this point\n\nclass AndroidLogFile(object):\n\n    def __init__(self):\n        self.buffer = ''\n\n    def write(self, s):\n        self.buffer += s\n        lines = self.buffer.split('\n')\n        for line in lines[:-1]:\n            androidbridge.log(line)\n        self.buffer = lines[-1]\n\n    def flush(self):\n        return\n\nlogger = AndroidLogFile()\nsys.stdout = logger\nsys.stderr = logger\n\nimport bootstrap\nbootsrap.run()\n";